<chapter Datascope PHP Interface>
<info>
dl( 'Datascope.so' ); 
</info>
<man>
% man datascope_php
</man>

<subsection Opening a Database>
<function>

ds_dbopen (database, permissions)
    returns a database pointer to the database

ds_dbopen_database (database, permissions)
    returns a database pointer to the database or table

ds_dbopen_database (database, permissions)
    returns a database pointer to the specified table ("-" for stdin)

dblookup ($db, database, table, field, row)
    returns a database pointer for the specified database, table, field, and row.

ds_dbtmp ($schema)
    return a database pointer to a temporary database of the specified schema

ds_dbcreate ($filename [, $schema [, $dbpath [, $description [, $detail]]]])
    create a database descriptor in the specified filename

ds_dbclose ($db)
    close a database

dbfree ($db)
    free memory for a database view

dbdestroy ($db)
    destroy all tables of a database

dbtruncate ($db, $nrecords)
    truncate a database table to the specified length

dbdelete ($db)
    delete rows from a database

dbmark ($db)
    mark rows for deletion

dbcrunch ($db)
    remove marked (null) rows from a database table

<subsection Manipulating Fields and Records>

dbaddv ($db, field_name, value, [field_name, value, ...])
    add a new row with the specified values to the database

dbaddnull ($db )
    add a new null row to the database.

dbadd ($db [, $record] )
    add a new row to the database from the scratch record or 
    from the specified string.

dbputv ($db, field_name, value, [field_name, value, ...])
    change the fields for an existing row to the specified values

dbput ($db [, string])
    put a raw field or an entire record into database from the scratch record [or the specified string]

dbgetv ($db, field_name [, field_name, ...])
    returns the values of the specified fields for a particular rows

dbget ($db [, 0])
    get a raw field or an entire record database from the [or load it into the scratch record]

dbadd_remark ($db, remark )
    add comment in remark table for the specified row

dbget_remark ($db)
    get any comment from remark table for the specified row

db2xml ( $db [, string flags [, string rootnode [, string rownode [, array fields [, array expressions]]]]] )
    returns an XML structure corresponding to a view

<subsection Forming Views>

dbprocess ($db, commands)
    returns a new view which is the result of applying the dbprocess
    commands to the input view; possible operations are: dbopen,
    dbjoin, dbgroup, dbleftjoin, dbnojoin, dbselect, dbseparate,
    dbsever, dbsort, dbsubset, dbtheta, dbungroup

dbsort ($db [, -u][, -r][, key, key, ...])
    sort a view by the specified fields

dbgroup ($db, key [, key, ...])
    group the input view according to the specified keys

dbungroup ($db)
    separate a grouped view into its component rows

dbsubset ($db, expression)
    returns a new view which is the set of all rows which satisfy the expression

dbbase ($db, tablename)
    returns the row of the specified base table corresponding to the row in the input view

dblist2subset ($db [, list])
    returns a new view with the listed records, or with the range indicated by the input grouped bundle if no list is specified 

dbget_range ($db)
    returns the index of the first, and one plus the index of the last element in a range of rows represented by a database pointer

dbseparate ($db, table)
    returns a view containing records from the specified table that are in the input view

dbsever ($db, table)
    return a view that omits the specified table

dbjoin ($db1, $db2, ['-outer'], [join-keys])
    create a new view from the input views, using join keys if specified

dbtheta ($db1, $db2, [expression] )
    create a new view with all combinations of rows, matching expression if specified

dbnojoin ($db1, $db2, [join-keys])
    return view with all rows in db1 which don't join to db2

dbunjoin ($db, database)
    create a new database from the records of the input view

dbwrite_view ( $db, $filename )
    save a database view to a file

dbread_view ( $filename [, $viewname] )
    read a database view from the given filename

dbsave_view ( $db )
    save a database view as part of the database

<subsection Handling Waveform Data>

trloadchan ( $db, t0, t1, sta, chan )
    load a channel of waveform data into a Datascope trace object

trsample ( $db, t0, t1, sta, chan [, apply_calib] )
    load a channel of waveform data into a PHP array of alternating epoch-time and data-value

trsamplebins ( $db, t0, t1, sta, chan, binsize [, apply_calib] )
    same as trsample, but the data points are grouped into bins of binsize samples and the epoch-time,min,max for each group is returned

trapply_calib ( $tr )
    multiply waveform data in trace object by calib value

trextract_data ( $tr )
    extract waveform data into a PHP array

trdata ( $tr [, i0 [, npts]] )
    extract waveform data into a PHP array, specifying the starting index $i0 and maximum number of points to return if desired

trdatabins ( $tr, binsize [, i0 [, npts]] )
    same as trdata, but the data points are grouped into bins of binsize samples and the min, max for each group is returned

trsplit ( $tr )
    break up waveform records at marked bad data

trsplice ( $tr )
    splice together data segments

trfilter ( $tr, filter )
    filter data in-place according to the given filter-description string

trfree ( $tr )
    free a Datascope trace-object structure

trdestroy ( $tr )
    destroy a Datascope trace-object structure

trtime2samp ( double time0, double samprate, double time1 )
    find the index of a sample given its timestamp

trsamp2time ( double time0, double samprate, int isamp )
    find the timestamp of a sample given its index

trsamprate ( double time0, int nsamp, double endtime )
    find the sample rate of a time-series given its other attributes

trnsamp ( double time0, double samprate, double endtime )
    find the number of samples in a time-series given its other attributes

trendtime ( double time0, double samprate, int nsamp )
    find the end-time of a time-series given its other attributes

<subsection Error Handling>
elog_init ( argc, argv ) 
    Initialize the elog message routines

elog_log ( msg )
    save message on the elog message log

elog_debug ( msg )
    send a debug message to the elog facility
	
elog_notify ( msg )
    send a notification message to the elog facility

elog_alert ( msg )
    send an alert message to the elog facility

elog_complain ( msg )
    send a complaint to the elog facility

elog_die ( msg )
    send a fatal message to the elog facility and exit

elog_string ( n )
    return error log starting with message n 

elog_clear ()
    clear the elog message log

elog_mark ()
    return the count of messages currently held in the error log

elog_flush ( deliver, first )
    eliminate log messages after first, printing them if deliver is set

elog_callback ( replacement )
    replace the standard elog processing with the named PHP replacement function
    (this function takes two arguments, an integer severity code and a string 
    containing the log messages, and returns an integer which, if nonzero,
    will cause the log to be cleared)
 
<subsection Miscellaneous Datascope Functions>
dbquery ($db, code)
    query the database for information, e.g. dbquery($db, "dbRECORD_COUNT"). see 
    Datascope Constants for valid query codes.

dbnrecs ($db)
    query the database for number of records in a table or view (same as
    dbquery for dbRECORD_COUNT)

dbex_eval ($db, expression)
    evaluate expression for a particular row

dbcompile ($db, string)
    dynamically add new attributes or relations to the schema

dbnextid ($db, id_name)
    get the next free id value for the specified id_name

dbinvalid ()
    return a database pointer of dbINVALID

dbstrtype ($db, string)
    classifies string, returning "strREAL", "strINTEGER", "strNULL", "strSTRING", 
    "strTIME", "strFIELD", or "strUNKNOWN"

dbextfile ($db [, base-table])
    return the filename for an external file for a particular row in a view

dbfind ($db, expression, [, first [, reverse]])
    find a record matching an expression

dbmatches ($dbk, $dbt, $hookname [, join-keys])
    return row numbers of records in $dbt that match the single row $dbk

<subsection Parameter Files >

pfget (pfname, key)
    return the value for the key from the parameter file pfname

pfget_boolean (pfname, key)
    return 0 or 1 depending on the value of key in the parameter file pfname
    
pfupdate (pfname)
    reread a parameter file if necessary

pffiles (pfname [, all])
   List the files which make up a parameter file object. If all is specified 
   and nonzero, list all possible filenames, including non-existent files. 

pf2string (pfname)
   return a string representation of a parameter file object

pfrequire (pfname, atime)
   require pf_revision_time from last file pfname to be later than atime

pfcompile (string, pfname)
   convert the specified string into a parameter file object

pfput (key, value, pfname)
   insert key/value pairs into a parameter file object

pfdel (pfname, key)
   remove the specified parameter from a parameter file object, returning the value

pfwrite (filename, pfname)
   write a parameter file object to the specified file

pf2xml (pfname [, flags [, prolog [, name]]])
   convert a parameter file to xml

<subsection Time Conversion>

strtdelta (dt)
    convert the time-difference dt (in seconds) to a string, eg "30:35 minutes"

strtime (epoch)
    convert an epoch time to a string date and time

strydtime (epoch)
    convert an epoch time to a string date and time including julian day

strdate (epoch)
    convert an epoch time to a string date

strlocaltime (epoch)
    convert an epoch time to a string date and time in local timezone

strlocalydtime (epoch)
    convert an epoch time to a string date and time including julian day, in local timezone

strlocaldate (epoch)
    convert an epoch time to a string date in local timezone

now ()
    return epoch time according to local system clock

is_epoch_string (timestring)
    return an epoch time equivalent of a valid timestring, or an empty result if translation fails

epoch2str (epoch, format [, timezone])
    return a string equivalent of an epoch time, optionally converting to the specified timezone

str2epoch (timestring)
    return the Unix epoch-time equivalent of a time string

epoch (yearday)
    return the Unix epoch-time equivalent of an integer julian day

yearday (epoch)
    return the integer julian-day corresponding to the given epoch time


<subsection Instrument Response Routines>

dbresponse (filename)
    return a PHP resource representing the response curve in $filename

eval_response ($response, omega)
    return a two-element array of the real and imaginary response at $omega

<subsection Special Functions>

yesno (s) 
    return -1 for yes,ok,true,1,y,on,t; 0 for no,n,false,0,off,f; 1 otherwise

makedir (d)
    make the complete directory path

make_pathdirs (f)
    make the complete directory path assuming the last element is a filename

datafile (env, file)
    find the specified file by looking first at the environment variable, then along the path


datapath (env, dir, file, suffix)
    find the specified file by looking first at the environment variable, then along the path

abspath (a)
    return the absolute path to the specified file

relpath (from,to)
    return the path to the file 'to' relative to the directory 'from'

cleanpath (p [, nolinks] )
    return the path resolving any relative elements, and symbolic links if requested

concatpaths (a, b)
    properly concatenate two path elements

parsepath (a)
    split a pathname into directory, filename base, and suffix (if present)

grn (lat, lon )
    return geographic region number based on location 

grname (lat, lon )
    return geographic region name based on location 

srn (lat, lon )
    return seismic region number based on location 

srname (lat, lon )
    return seismic region name based on location 

<subsection Foreign Keys >

<body>
map between CSS3.0 station/channel naming conventions and the
different conventions of autodrm and SEED.
</body>

<function>

sta = map_autodrm_netsta (anet, fsta)

chan = map_autodrm_chanaux (sta, fchan, aux)

(anet, fsta) = autodrm_net (sta)

(fchan, aux) = autodrm_aux (sta, chan)

sta = map_seed_netsta (snet, fsta)

chan = map_seed_chanloc (sta, fchan, loc)

(snet, fsta) = seed_net (sta)

(fchan, loc) = seed_loc (sta, chan)

finit_db ($db)
    cause foreign key routines above to use specified database $db

<chapter Orb PHP Interface >
<info>
dl( 'Orb.so' ); 
</info>
<man>
% man orb_php
</man>
<function>

orbopen (name, perm)
    open an orbserver connection

orbclose (orbfd)
    close an orbserver connection

orbping (orbfd)
    return the version number of the orbserver

orbtell (orbfd)
    return the pktid of the orbserver's current position

orbposition (orbfd, from)
    return the pktid after repositioning the orb to the position specified by the 'from' string ('newest', 'oldest', or any str2epoch(3) time string)

orbseek (orbfd, which)
    return the pktid after repositioning the orb to the specified packet (given either as a packet-id or as one of ORBCURRENT, ORBPREV, ORBNEXT, ORBNEXT_WAIT, ORBOLDEST, ORBNEWEST)

orbwait (orbfd, re, mintime, timeout )
    wait for clients matching the specified regular expression all to have read packets younger than mintime, optionally limited by a timeout. Returns 0 if no wait is necessary, positive if a wait was necessary, and negative if an error occurred (including expiration of timeout)

orbafter (orbfd, time)
    return the pktid after repositioning the orb to the next packet after the specified time. The time must be in epoch seconds 

orbselect (orbfd, regex)
    subset the source-names for those matching regex

orbreject (orbfd, regex)
    reject the source-names matching regex

(pktid, srcname, time, packet, nbytes) = orbreap (orbfd)
    get the next packet from the orb

(pktid, srcname, time, packet, nbytes) = orbreap_timeout (orbfd, maxseconds)
    get the next packet from the orb, returning if timeout is exceeded

(pktid, srcname, time, packet, nbytes) = orbget (orbfd, which)
    get a single packet from the orb, specified as in orbseek

orbput (orbfd, srcname, time, packet, nbytes )
    put a single packet on the orb

pktid = orbputx (orbfd, srcname, time, packet, nbytes )
    put a single packet on the orb and return the packetid

pktstring = orbpkt_string (srcname, time, packet, nbytes )
    return an forb(5) representation of an orb packet

(result, pkt) = unstuffPkt (srcname, time, packet, nbytes )
    unstuff a single packet, returning a result code and a packet object
<example>
kind    kind of packet
----    --------------
Pkt_wf  waveform packet
Pkt_st  status packet
Pkt_db  database row
Pkt_pf  parameter file
Pkt_cn  control messages
Pkt_rw  binary data
Pkt_ch  character string
Pkt_tp  test packet
</example>
    The packet object has the following methods which return various
    values from the c Packet structure: parts, time, PacketType,
    nchannels, channels(i), pf, string, db, dfile,
    and version.

    The parts method returns (net, sta, chan, loc, suffix, subcode)

    The PacketType method returns the packet kind (also
    returned by unstuffPkt) and the corresponding description.

    The channels method takes an index (0..n-1) argument 
    and returns channel object with its own methods:
<example>
calib    calper   chan     cuser1   
cuser2   data     duser1   duser2   
iuser1   iuser2   iuser3   loc      
net      nsamp    samprate segtype  
sta      time     
</example>
    The data method returns all the waveform data in a list of integers.

orbstat(orb)
    Get the standard status values from the orb; this
    return an object with the following methods:
<example>
address     closes      connections 
errors      host        maxdata     
maxpkts     maxsrc      messages    
nclients    nsources    opens       
orb_start   pid         port        
rejected    started     version     
when        who         
</example>

(when, sources ) = orbsources(orb)
    return the query time and a list of source objects, one object  
    per source. Each object has the following methods:
<example>
active       nbytes       
npkts        slatest      slatest_time 
soldest      soldest_time srcname      
</example>

(when, clients) = orbclients(orb)
    return the query time and a list of client objects, one object  
    per client. Each object has the following methods:
<example>
address     bytes       
errors      fd          host        
lastpkt     lastrequest mymessages  
nreads      nreject     nrequests   
nselect     nwrites     packets     
perm.       pid         pktid       
port        priority    read        
reject      select      started     
thread      what        who         
</example>

pforbstat (orbfd, flags)
    create a nested PHP array containing orb metadata 

split_srcname (srcname)
    split an orb source-name into net,sta,chan,loc,suffix,subcode

join_srcname (net, sta, chan, loc, suffix, subcode)
    return an orb source-name created from the component pieces provided

(name, content, desc ) = suffix2pkttype( suffix )
    return name, content type and description for a given packet-type suffix

<chapter PHP System Information >
<info>
dl( 'sysinfo.so' ); 
</info>
<man>
% man sysinfo_php
</man>
<function>

my_ip ()
    return ip address (eg, 209.193.47.96)

my_os ()
    return os name (eg, SunOS)

my_hardware ()
    return hardware string (eg, sun4u)

my_hostname ()
    return hostname (eg, yukon)

ip2name ( ipaddress )
    translate a dot-notation IP address to hostname

name2ip ( hostname )
    translate a hostname to dot-notation IP address

ip ( ipaddress )
    translate a dot-notation IP address to equivalent plain-integer address

pidexecname ( pid )
    return the executable name for a process-id

pidcmdline ( pid )
    return the command line for a process-id

pidpwd ( pid )
    return the process working directory for a process-id

pid_exists ( pid )
    return true if the given process-id is running

pidinfo ( pid )
    return an associative array of statistics for a process-id

nomem ( address, nbytes )
    test a memory address for validity, returning the first bad 
    address if the location is invalid, zero otherwise 

sysloadavg ()
    return 1, 5, and 15-minute system load-averages and number of processes

sysmem ()
    return an associative array with total, used, and physical memory in MB

sysmounted ()
    return mount-point, file-system type, remote host, and remote source
    for all mounted filesystems 

syscpu ()
    return the number of cpus, then percent of time spent in idle, user, 
    kernel, iowait, and swap for the first cpu, then for successive cpu's 
    if present

statvfs ( path )
    return an associative array with filesystem information about a path
