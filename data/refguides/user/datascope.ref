<chapter Datascope Database Tools>
<commands>

<subsection Database Schemas>
<commands>

dbbuild [-bv] [-p pf] db [input]
    build new database with site, sitechan, sensor, instrument, stage and calibration tables

dbbuild_validate [-dsv] [file ..]
    verify that referenced  parameter files contain all required fields

mk_dbops [options] {-I | -U | -R | -A} db snet sta timestamp [comm_provider [comm_type]]
    update adoption, deployment, comms, dlsite after install, adoption or removal
<options>
-A	adoption
-I	installation
-R	removal
-U	update
-n	no update to dlsite
-v	verbose
-V vnet	virtual network code
-m match	source match
-p pf	parameter file
-P orb	prelim orb
-S orb	status orb
-w db	prelim wf db
-W db	wf db
-s db	site db
</options>

dbhelp [ db | s ]
    gui to explore schema for database db or schema s

dbdescribe { db | schema } [ table ]
    generate ascii formatted document describing schema, database, or database table

dbdoc db
    generate troff formatted document describing schema for database db

dbfilenames [-v] db
    list database tables and permissions

dbdesign [schema]
    create and/or edit Datascope schema files

dbinfer file [file...]
    build schema file from set of ascii example files

dbquery [-isv] [-f fld] db[.tbl] [query ...]
    query database/schema for parameters like field size

<subsection Creating and Editing Databases>
<commands>
dbe [-e] [-p pf] db[.table] [ db[.table] ...] [-f field ...]
    general purpose viewer/editor for databases 

dberesp [db.table | -f response ..]
    run by dbe to plot response curves from database table or response files

db_extfile_proc -m mode [-u] [-w nmax] [-t table] db.table
    run by dbe to run arbitrary commands on database external files

db_textedit db.table
    run by dbe to edit external text files

deprecated db_xvimage db.table
    run by dbe to show external image files

db_showurl db.table
    run by dbe to show external web pages

remark_gui [table|view]
    run by dbe to add/show remarks

dbset [options] db[.table] field from [to]
    change value of attribute field throughout database
<options>
-c 	ask before changing ('all' accepts all changes)
-C	force updating timestamp field
-l	use literal value for comparison
-v	show changes
</options>

dbconvert [-fv] [-s new_schema] db dbout[.table]
    create dbout (or dbout.table) from database db, using rules from dbconvert parameter file

dbcreate [-r refdb] [-s schema] [-iv] database
     create database descriptor file

dbcp [options] dbin[.table] dbout
    copy database dbin (or dbin.table) to database dbout
<options>
-a alt	specify alternate subdir for external file copies
-d	make descriptor file for dbout which references dbin
-i	prompt for permission to overwrite existing tables
-I table,...	skip copying specified tables
-F	override ../ exclusion (caveat emptor)          
-f	copy external files (default changes references)
-l	create local symbolic links for external files
-o	quietly overwrite existing external files
-s	copy without correcting external file references 
-v	verbose
</options>

dbadd [-afov] dbin.table dbout.table expr1 [expr2 ...]
    add rows to dbout.table using rows from dbin.table and expressions expr1, expr2, ...; with -a, add all fields from dbin.table, with -f ignore key duplications, with -o overwrite duplications

dbaddv [options] database.table [name value name value ...]
    add records to table
<options>
-c	confirm each addition
-i	interactively
-f	ignore key duplication
-v	verbose
</options>

dbdelete [options] view [table ...]
    delete (or mark) all records in database view (or just records in table)
<options>
-c	require individual confirmations for each record
-m	mark records only (no final crunch)
-s	save copy of original file
-v	verbose
</options>

dbcrunch [-nv] db [table ...]
    crunch out marked (null) records in database db, or just tables

dbdestroy [-ginkv] db[.tbl]
    destroy database or table by removing all associated files
<options>
-g	remove files which match glob of db.*
-i	confirm each file removal first
-n	show what would happen (don't do it)
-k	keep external database files
-v	verbosely
</options>

dbsplit [options] dbin dbout
    copy records from database dbin which satisfy some subset expression into database dbout, using rules from parameter file.
<options>
-d	delete selected rows from dbin after copying to dbout
-f 	overwrite any existing output tables in dbout
-k 	keep renamed backup of original tables
-p pf	  	parameter file 
-s subset	records which satisfy expr are copied to dbout
-v 	verbose
</options>


dbmerge [-vV] [-x tb1,tb2] dbin dbout
    merge database dbin into database dbout (except for tables tb1, tb2, ...)

dbconcat_event db1 db2 [ db3 ...] dbout
    combine multiple CSS 3.0 event databases db1, db2, ... (arrival, assoc, event, origin, and origerr tables) into single new database dbout

dbfixids db idname [ idstart ]
dbfixids [-s server] [-i id1,...] [-x id2,...] db [ db2 ]
    renumber ids for idname (starting at idstart) in database db, or sync ids to idserver server
<options>
-i ids	only renumber these ids
-x ids	don't renumber these ids
</options>

time_slice_db [-v] [-V] [-s] [-f] [-C] [-p parameter_file] [-m mail_to] [-t start_time] [-e end_time] (-B | -E | -W) dbin
    Divide seismic database into periodic increments
    
<subsection Creating Database Views>
<commands>
dbsubset [-n name] [-v] aview expr
    keep only records from aview satisfying expression expr

dbsort [options] aview [key ...]
    sort input aview by keys
<options>
-o	overwrite original table with sorted table
-n name	save results into database.name
-r	reverse sense of sort
-u	eliminate extra rows which are identical in sort keys
-v	mention number of output records
</options>


dbjoin [options] aview [:key ...] table2 [[:key ...] table3 ...]
    join input aview with other tables, either by inferring join keys or by explicitly specifying join keys
<options>
-o	outer join
-n name	save results into database.name
-v	verbose
</options>

dbnojoin [-n name] [-v] aview [:key ...] table2
    create view of records from aview which do not join with table2

dbtheta [-c expr] [-n name] [-v] aview table2
    create view joining aview to table2 where expression expr (on joined record) is satisfied

dbseparate [-n viewname] [-v] aview table1
    create view containing only rows of base table table1 used in aview

dbsever [-v] [-n name] aview table2
    create new view which removes table2 from input aview

dbunjoin [-f] -o dbout aview
    create new database dbout using base table records from aview

dbselect [options] aview [exp ..] [-pre exp exp ...] [-post exp exp ...] [-group field1 field2 .. [-pre exp exp ..] [-post exp exp ..]] [-group field1 field2 .. [-pre exp exp ..] [-post exp exp ..]]
    print selected fields and expressions from input aview
<options>
-b	strip blanks from each field in output.
-F sep	separator
-h	add automatic headers to output
-p	print primary key
-s	allow expressions to modify database fields with operator ":=".
</options>

db2xml [options] aview [name expr [name expr ...]]
    print database view as XML
<options>
-d tag 	tag name for document root
-p	primary keys only
-r tag	tag name for each row
-t stylesheet	tag name for each row
-v	verbose
</options>

<subsection Verifying Databases>
<commands>
dbcheck [-vv] db[.table]
    scans database (or table) for lines with invalid length

dbverify [options] db[.table]
    perform some consistency checks on database db (or table)
<options>
-A t1,t2..	alternate keys need not be unique in t1, t2, ..
-c	perform consistency checks
-C c1,c2,..	run only specific consistency checks c1,c2,...
-I t1,t2..	suppress table checks on t1, t2, ..
-i	check that referenced foreign ids are present 
-j	test 2-table joins from parameter file
-k	verify primary and secondary key are unique
-l	check that lastid table entries are valid
-N mx	print maximum of mx failures for some tests 
-O t1,t2..	perform table checks only on t1, t2, ..
-P t1,t2..	primary keys need not be unique in t1, t2, ..
-p	external program tests from parameter file
-r	check attribute ranges
-s	check for shadowed database tables
-S n	sample n records, not entire table
-t	turn off all tests
-u	complain about unreferenced ids
-v	verbose
-x	check for existence of external files
-X pf	use alternate parameter file
</options>

dbassert [-r record#] [-v] database.table expr ...
    evaluate each expr against the database table, with -v printing first record which fails

dbcheck_responses [-t tolerance] [-v] database
dbcheck_responses [-t tolerance] [-v] -f response-file ...
     perform simple checks on response files from instrument and stage 

dbdiff [options] db1[.table] db2[.table]
    find differences between two databases (or tables)
<options>
-A absolute_tolerance 
-R relative_tolerance
	allow floating point values to vary by some absolute or relative tolerance in indexes
-a absolute_tolerance 
-r relative_tolerance
	allow floating point values to vary by some absolute or relative tolerance
-e	print times as epoch seconds
-i name	list of names to ignore
-l {exact|compare|ignore}
	for link fields
-N max_diffs	show a maximum of max_diffs per table
-o	compare records in order rather than by index 
-w width
-x {exact|compare|ignore|Program}	
	for external files
</options>


<subsection Miscellaneous>
<commands>
deprecated db2perl db [ table1 table2 ...]
    create perl subroutines to read and write database tables

dbcentral [-dln] [-q query] [-t time] [database_cluster [task_nickname]]
    launch commands on commonly used databases

dbgraph [options] db[.tbl [ {yexpr|xexpr yexpr} ]]
    graph data from a database
<options>
-b batch	specify batch file
-B log	log tk graphics commands
-p pf	specify pf
-C	debugging
-d	debugging 
-D	show coordinates
</options>

dbids [-p port] [-P pf] [-v] database
    idserver for Datascope databases

dbindex [-v] database[.table [keys..]]
    create static index(es) for static tables or databases (use with caution)

dbnextid db idname
    get next available id for idname (in database db)

dbcalc [options] db.table [ record# | expression ]
    interactive interface to Datascope expression calculator
<options>
-c expr	calculate single expression
-e	echo input to stdout
-r	print reverse polish notation for expression
-t	show type of each piece of expression and result
</options>

dbremark [ -p ] database table field value
    get/add remark from/to database (must contain remark table and commid)

deprecated dbtidy db
    sort various tables from CSS database db into preferred order, and renumber some ids

dbfixchanids [-q] [+q] db
    fix chanid attributes in wfdisc and arrival tables

dbfixtimeres db [expr]
    fix time residuals in assoc table (for records which satisfy expr)

dbfix_calib db
    replace null calib values in wfdisc with values from calibration table
