<chapter Antelope Real Time System>

<subsection Administration and Control>
<commands>

cronrun [-nv] command line
    run command line immediately, reproducing cron environment 

orbpftrigger [options] orb [cmdstring]
    parameter file trigger of program execution
<options>
-select expr
-start {pktid|time}
-number number
-nowait
</options>

orbptrigger [options] orb command ...
    orb packet trigger of program execution
<options>
-select packet
-start {pktid|time}
-number number
-state file
-background
</options>

pktmon [-n npkts] [-p pf] [-S state] [-0dv] orb
    read packets, send alarms for specified conditions 
<options>
-0	start at first packet in orb
-S state	specify alternate directory to save history files 
-d	print debugging information.
-n npkts	stop after npkts packets
-p pf	specify alternate parameter  file
-v	print each packet read.
</options>

rtdemo [-t] [name]
     setup to run an Antelope realtime demo; -t suppresses gui

rtexec [options] [comment]
    real time system executive; runs all other real time processes
<options>
-c	clear logs
-d	debug mode
-D	for Mac OS X launchd, don't fork	
-f	don't ask about killing previous rtexec
-k	kill running rtexec
-n	show what processes would be run
-s	save old logs in new subdirectory
-t	run `tail -f logs/rtexec` 
-v	more verbose
-x	user xuserauth rather than userauth	
-q min	run for specified minutes then shutdown
-r min	run for specified minutes then restart
-u user	specify user requesting shutdown
-w why	with -k, file why explains shutdown
</options>

rtinit [-q] [-v] [db]
    initialize directory for rtexec/rtm by creating directories and copying pf files

rtkill [options] [procname]
    stop, start, or restart a process running under rtexec
<options>
-l	list process names from the rtexec.pf Run array
-r	restart the specified process
-s 	start the specified process
-q 	query whether the specified process name is set to run
-v	verbose
</options>

rtrun [-nv] command-line
    run command-line using rtexec environment (like an rtexec cron job)

rtmanage [options] 
    scriptable lightweight cousin to rtexec for running collection of programs temporarily
<options>
-9 nsecs 	wait nsecs before killing programs with -9 signal
-C	no timetags
-D subdir 	run in specified subdirectory
-T timeout 	maximum time to run
-b secs 	interval between running commands (default=0)
-c commands 	read commands from file or commandline
-d	run in subdirectory #RTMANAGED
-l	save command output in individual log files in logs directory
-p pf 	specify alternate parameter file
-q program,program	quit if one of these programs dies
-t nsecs 	wait nsecs after termination event to shut down
-v	more verbose
-x	on macs, start in background with /usr/libexec/StartupItemContext
</options>

rtorbcmd [-d] [-p pf] target command
    client program for sending commands to remote orb

rtorbcmd [-d] [-n npkts] [-p pf] [-S state] orb
    server program for reading and executing commands at remote orb

<subsection Real Time Display>
<commands>

dbevents [options] dbname [start [end]]
    display map of seismic events and waveforms (between times start and end)
<options>
-max_age max_age	limit age of displayed events
-show_detections	show stations with detections only
-title window_title	window title
-pf pfname	parameter file name
</options>

dbevents_new dbname
    preliminary new version of dbevents

dlmon [options] orb [cmdorb]
    monitor/control generic digitizers
<options>
-dump period
-dump_image file
-model model	data logger model
-pf pffile	parameter file
-select_status expr_status
-select_log expr_log
-show_map 	
-state {Icons|Multi|Single}	initial display state
-sort name	initial sort name
-subset subs_expr	initial expression for subsetting stations
</options>

ecrontab [-r] [file]
    gui interface for editing crontab files; -r option for rtexec style crontab

inspect_snapshot snapshot
    gui to help read output from rtincident or other snapshots

pingmeister
    display network connectivity

deprecated qtmon dataorb data2orb cmdorbname [database]
    monitor Quanterra digitizers

orbdisp [options] orbserver [start [range|end]]
    inspect waveform data on orb server
<options>
-c re	save channel matching regular expression re
-m re	select packets matching regular expression re
-r re	reject packets matching regular expression re
-l latency	expected max latency for packets
-n	show network on display
-p period	specify minimum packet period
-w t	make time window t seconds
</options>

orbmonrtd [options] orb
    real time waveform trace display
<options>
-dump dt gif	dump image to gif every dt seconds
-filter filter	
-height pixels	single trace window height in pixels
-hmax hmax	maximum height of main window in pixels
-ntinc nt	number of traces between time scales
-pf pf	use alternate parameter file
-redraw	start with oldest orb packet
-reject re	reject channels matching re
-select re	select channels matching re
-source net_sta_chan
 	select display channels on command line
-title title	title for orbmonrtd window
-tshift_time t0	specify t0 for right edge of window
	use t0="-" to use first packet time
-twin minutes	window size in minutes
-unmap	remove controls from display (for vnc in browser)
-width pixels	trace width in pixels
-wmax wmax	maximum width of main window in pixels
-reverse_labels	put station labels on right
</options>

rtm [-icon iconname] [-title title] [-procwin] [-netwin]
    monitor real-time tasks and resource usage

tkorblag orb
    graphical view of read client latency in orb 

<subsection Reports>

dlmontxt [options] orbname [orbname2 [...]]
     generate terse status summary for data loggers
<options>
-m re1	read only packets which match re1 
-r re2	don't read packets matching re2
-d dl_re	match data logger names
-M email	list of email addresses, or @filename for addresses in filename
-s subject 	subject line for email report	
</options>

dlreport [options] { -S | -E } db 
    summarize dlevents in mailable report 
<options>
-d time	start time for report	
-n ndays	number of days for report
-v	verbose
-m email,..	email list	
-u	include URL in report
-p pf	alternate parameter file
-s subset	valid subset for dlevent
-C dlsta	write a closure report for dlsta
-S	station based subset
-E	dlevent type subset
</options>

leak_detector [options] 
    attempt to detect and announce programs with leaks
<options>
-1	show processes which would be tracked
-D	print data at each iteration
-v	show when starting to track a process
-V 	show leak details at every iteration
-d depth	specify depth of ring buffers in state file
-i secs	specify how often to run ps
-m re	track only processes matching re
-n niter	run only niter iterations
-p pid	track only specified pid
-S state	specify alternate state file
</options>

rtreport [options] [directory]
    report some statistics on data collection
<options>
-d start	start of reporting period
-g	only show gaps
-m email,..	list of email recipients
-N re	only report on network codes matching re
-n days	number of days report covers
-p pf	use specified pf instead of rtreports.pf 
-s subset	report only on stations satisfying subset
-w wfdb	alternate waveform database
-x subset	deployment table subset
-v	more detail about gaps
-Y	include full date in event report 
-z	only z channels
</options>

rtsys [options] [directory]
    summarize system operation and log reports
<options>
-C	eliminate summary of cronjobs 
-d time	start of reporting period
-m email,..	list of email recipients
-N re	only report on network codes matching re
-n n	last n lines from log files (default = 10)
-P pf	use specified pf instead of rtreports.pf 
-p	mail only when problem is detected
-w db	specify alternate waveform db     
</options>

rtoutage [options] db t0 t1
    show data gaps for database db from time t0 to t1
<options>
-A	format output as an autodrm outage report
-c	list reporting stations
-C	list reporting channels
-d gapdb	save gap info into database gapdb
-n netcode	only process station from netcode
-N	summarize by network
-P maxpts	maximum # waveform points to load at once
-p	print percentage of data recovered 
-s subset	only show gaps for sta/chan subset
-S	show gaps as seconds only
-t	only show totals
-s subset	deployment table subset
-z	select only vertical channels 
</options>

rtmail [-s subject] [-a filename] [-b bcc] [-c cc] [-f from] [-r replyto] [-dv] recipients
    send mail with attachments

stanote [-{f|F} file] [-r range] [-t time] [database] [sta [note]]
    simple method for adding note about station, to appear in gap report in rtreport

truncate_log [options] log [log..]
    eliminate old lines in log files
<options>
-c	also remove lines without time tags
-d n	trim lines before n days ago
-f	force truncation sooner than 8 days
-h h	specify max records in rtsys tables
-m m	trim files so maximum size is m kbytes 
-r	suppress saving removed lines in new file
-s n	only trim files larger than n kbytes
-v	be more verbose
</options>

<subsection Snapshots>

dbloc_snapshot [-d maxdb] [-f output-file] [-l maxlog] [-v] database
    creates snapshot of dbloc2 directory for problem resolution

dbsnapshot [options] db [start_time [end_time|period]]
    create tar snapshot of database (for debugging)
<options>
-d d	copy output to dir d rather than tar file
-e e	related to event evid e
-f file	name of tar file
-n m	max records (per table) to include
-r	include response files
-R	include stage response files
-s s	subset expression for stations/channels
-v	more verbose
-w M	minutes M of data before now
</options>

rtincident [options] [output_file]
    collect some system related information into report; rtexec
    runs this program and sends the results to incidents@brtt.com
<options>
-c corefile	specify corefile (on which dbx is run)
-e command	specify command line
-l log	specify log file for program
-M msg	specify message to include in report
-m addr	send report as email to addr
-n	just show what would be run
-p program 	specify program which dumped core
-v	verbose
-x	append corefile to email
</options>

rtsnapshot [options] 
    collect some pertinent info from real time system into tar file for problem report
<options>
-c	include core files
-d #rows	max rows from database tables
-f filename	specify output filename
-l #loglines	max lines from log files
-p re	collect 50 packets matching re
-v	more verbose
</options>

syssnapshot [-c] [-f filename] [-l #lines] [-v] [dir]
    create tar snapshot of system configuration 

<subsection Orbserver and Utilities>
<commands>
orbserver [options] pf
    orb ring buffer server, using parameter file pf
<options>
-h	stop after creating the new ring buffers
-k	don't reset ring buffer
-p port	use port instead of 6510
-P prefix	alternate names for orb files
-r	reset ring buffer
-s size	ringsize, eg 150M
-v[v]	verbose/doubly verbose
</options>

diskserver [-p pf] [-v] dir[:port]
     emulate read-only orbserver on port using directory dir of special forb files

orb2disk [options] orb directory [start-time [end]]
     copies packets from orb into into forb(5) segment files inside directory
<options>
-b bi	save state every bury interval seconds
-m re1	read only packets which match re1 
-r re2	don't read packets matching re2
-n n	stop after n packets
-N pktspersegment	specify max packets per segment
-p period	approximate time length of files
-s size	size limit for directory
-v	more verbose
</options>

orbproxy [options] orbhostport
     orbserver proxy
<options>
-i local_ipaddr	bind to one of several local ip addresses
-p local_portno	local proxy port number
-v	more verbose
</options>

orbstat [options] orb [secs]
    show statistics for orbserver orb every secs seconds
<options>
-c	show client statistics
-s	show source statistics
-i	interactive mode
-d [all|nets|stations|channels|loc_codes|types]	show waveform info 
-m re	show only packets or clients matching re
-r re	don't show packets or clients matching re
-n avg	boxcar average over avg queries 
-v	more verbose
</options>

orbclients [-t] orb 
    show organized view of orbserver/diskserver clients

orbport [-m] port
    look up port by name, number, or regular expression

pforbstat [options] orb [secs]
    Create parameter files of orb status
<options>
-a	analyze status for orb2orb connections
-c	show client statistics
-s 	show source statistics
-m re	show only packets or clients matching re
-r re 	don't show packets or clients matching re
-f	specify output filename
-o orb	specify output orb
-n name	specify srcname for packets on output orb
-v	more verbose
</options>

<subsection Data Loggers: import to orb>
<commands>
deprecated adsend2orb orb port
    read earthworm packets from udp port and copy to orbserver orb

altus2orb [options] targetname [orbtag1 orbname1 [orbtag2 orbname2 [...]]]
    transfer data from Kinemetrics Altus digitizer to an orb
<options>
-pf pf	specify alternate parameter file
-db db	specify database for calib information
-dlclock dlname
-v	be more verbose
-state file	save state in filename
-start time	only get events after time
</options>

comsim connection
    monitor, test and debug serial or ip communications

dcbba2orb [options] 
    copy data from RefTek DAS port to orbserver orb
<options>
-V	usage 
-r	validate pf file
-v	verbose
-a ip	data concentrator IP
-t file	data test file
-d port	data port of data concentrator
-o orb	orb for output
-g pf	parameter file
</options>

dlcollector [-p pf] [-S state] [-v] central-orb
    collect data from Kinemetrics Basalt data loggers

deprecated eworm2orb pf
    copy earthworm packets from memory ring buffer to orbserver

guralp2orb [options] orbname
    copy data from Guralp SCREAM server to orb
<options>
-d calibration_database
-p pf
-l file_for_logpackets
-v	verbose
-V	extremely verbose
</options>

guralplocate log1 log2 ...
    estimate station location from guralp log files

deprecated ida2orb [-u] [-r sec] orb nrts selection
    copy selected data from IDA nrts to orbserver
<options>
-u change station and channel to uppercase
-r sec	reject future packets 
</options>

isi2orb [-v] [-V] [-p pf] [-S state] server orb
    copy data from IDA server to orb

liss2orb [options] liss orb
    copy data from LISS server liss to orbserver orb
<options>
-d database	lookup calib, calper and segtype in db
-m m	only forward packets matching m
-r	remap net,sta,chan,and loc using local foreignkeys db
-s pktsize	specify block size explicitly
-v
</options>

rddas [options] port orb
    copy data from RefTek DAS port to orbserver orb
<options>
-R	send RESET_DAS command before reading 
-l	create logfile representing data
-p pf	specify parameter file
-s B,P,D,S	specify serial port baud rate B, parity P, data bits D, stop bits S
-u	write uncompressed packets to orb
-v	verbose
</options>

q3302orb [options] targetname [orbtag1 orbname1 [orbtag2 orbname2 [...]]]
    communicate with Q330 Quanterra digitizer, bringing data from Q330 into orb, and sending and monitoring commands from orb to Q330
<options>
-calib_db dbname	metadata database
-pf pf	parameter file
-S statefile	
-noipresolv	do not try to resolve ip addresses
-v	verbose
-poc_vampire	get pocs from other port
</options>

q330gpslocate log1 log2 ...
     estimate station location from Q330 log file

q330pocd [options] targetname orb
    receive POC messages and save to orb
<options>
-i ip	bind to one of several local ip addresses
-p port	specify alternative to port 2254
-noipresolv	don't look up hostnames
</options>

q330proxy [-v[v[v]]] [-help] [template]
    internet to SLIP proxy utility for Q330 data loggers

q330snoop [-noeth] [-noip] [-snoop] prefix_expr
     used with snoop to parse and print raw UDP Q330 packets 

q330_location [options] status_orb [cmd_orb] db
     alert if Q330 locations in status packets differ more than mmax from database location
<options>
-c chan_code	change default chan code from BHZ
-f	force dlcmd to renew data
-m mail	email address list
-n	only show what would be done, no table updates
-p pf_src	change default pf packets 	
-s sta_regex	select sta code
-t mmax	threshold for flagging of distance problems
-v	verbose
</options>

qt2orb [options] -dataorb orbd -cmdorb orbc -calib_db calib_db [-dataorb2 orbd2]
    communicate between Quanterra digitizer and orb
<options>
-pf pf	specify parameter file
-sta net_sta1 [net_sta2 [...]] 
 	override names from parameter file
-msglevel {0|1}
-v	verbose
</options>

qtbsetaddr ipaddr [timeout]
    set Quanterra baler ip-address

deprecated cs2orb [-v] [-seedout] [-t pf] [-dbcalib db] station orbout
    copy data from comserv to an orbserver orb

private cs2orb_1_0_1 comserv orbout [-v]
    copy data from comserv (version 1.0.1) to an orbserver orb

rtp2orb [-v] configuration_file
     collect data from RefTek data server (RTPD) and writes to orb 

ryo2orb [-v] [-V] [-p pfname] [-m subset] rtd_ipaddress:port orbserver
     collect GPS data in RYO format and write to orb

slink2orb [options] SeedLink orb
    SeedLink to orb module
<options>
-dc database	db to get calib, calper and segtype
-dm database	db to map SEED to CSS names
-nd delay	network reconnect attempt delay
-nt timeout	network timeout	
-k interval	keepalive interval
-pf pf
-S statefile
-o dumpfile
-r	remap net/sta/chan
-v[v[v]]	more verbose
</options>

<subsection Datalogger Commanding>
<commands>

automrc [options] orbname dc_name
    automatically send mass recentering command to RefTek DAS
<options>
-m srcmatch
-p pf
-s sleep
-t tperiod
-V verbatim
-v max_lta
</options>

dlautomrc [options] cmdorb orb [target]
    issue mass recenter commands to remote data loggers
<options>
-a vlt	out of range voltage value
-d dl 	data logger type
-D db 	use sensor types from db for voltage trigger level
-f  	force mass recenter (with -s, not with -a)
-m add	email notification list  
-n  	no mrc, only report what would be done 
-p pf 	parameter file 
-s dl_sta1,dl_sta2,... 	comma separated list of data loggers
-t n 	number of retries 
-v 	verbose 
-x dl_sta1,dl_sta2,...	comma separated list of rejected data loggers
</options>

dlcmd [options] orbcmd targets dltypes dlnames cmd [params]
    execute command cmd on generic data loggers
<options>
-waittime waittime	wait time for multiple targets
-timeout timeout	timeout waiting for response
-noblock	don't wait for response
-noreply	don't generate response packets
-prm	delete parameter files
-replytarget replytarget
-delayhangup delayhangup	delay digitizer hangup
</options>

q330util [options] cmd
    perform some utility functions for Q330
<options>
-port port	udp port
-port_base port_base	base port for Q330
-auth auth	Q330 authorization code
-sequence seq	starting sequence number for commands
-timeout timeout	timeout for udp response
-i local_ip	address to bind local UDP sockets
-pfout	display output in pf file format
</options>
    cmd is one of:
<List>
    pollsn q330tip 
    ping q330ip,lport,{info|ECHO} 
    register q330ip,sn,lport 
    getconfig  q330ip,sn,lport,config 
    control q330ip,sn,{eeprom|reboot|resync|gpson|gpsoff|gpscs} 
    sauth q330ip,sn[,port_1_auth[...]] 
    sipaddr q330ip,sn,interface,newip 
    sbpwr q330ip,sn,interface,function,timeout 
    rqannc q330ip,sn 
    umsg q330ip,sn,lport,message 
    ident q330ip,sn[,tport[,lport]] 
    marmotfix q330ip,sn[,interface[,baudrate]]
</List>

qtcmd [options] cmdorb net_sta cmd [params]
    execute commands on remote Quanterra digitizer
<options>
-target target
-replytarget replytarget
-timeout timeout
-noreply
</options>

<subsection Real Time Status to orb>
<commands>
cpu2orb [-i t] [-vv] orb
    put cpu and system utilization packets on orb every t seconds

df2orb [-i t] [-p pf] [-vv] orb
    put filesystem status information packets on orb every t seconds

heartbeat [-i interval] [-N net_sta] [-v] orb
     creates periodic condensed status packets with system info

orb2logs [-cn] [-m match] [-r reject] [-S state] [-w pattern] orb logdb [start [stop|period]]
    save logs packets (from tail2orb or from data logger acquisition) back into 
    corresponding plain files divided by epoch day boundaries (and by data logger).

orb2ntp [-d delay] [-f freq] [-m match] [-n navg] [-o old] [-r reject] [-u unit] [-Mv] orb
    use orb packet times as (very rough) ntp clock

orblog [-f file] [-s subcode] orb [log info]
    write single log packet to orb; packet contents are
    remainder of command line, stdin, or -f file

orbtail [-f] [-m match] [-r reject] [-number] orb [start [end|period]]
    read and print log packets from orb 

ps2orb [options] orb
    save process information from ps(1) to orb at interval t seconds
<options>
-a m	report on all processes every m'th iteration
-i t	report every t seconds
-n mx	quit after mx iterations
-t n	report on top n processes every iteration
-r {mem|cpu}	sort by mem or cpu
-u user	restrict to specified user
-vv	print reports on stderr
</options>

tail2orb [options] orb [file ...]
    monitor multiple files, sending any added lines as packets
    to orbserver orb
<options>
-g n	check for new files matching glob patterns every n'th iteration 
-i t 	check files every t seconds
-m m	specify maximum number of files monitored  
-N net_sta	specify alternate srcname
-p pf 	specify alternate parameter file
-S state	specify alternate state file 
-vv	print lines on stderr also
</options>

rtlogs orb
    display log messages from orbserver orb

<subsection Other Orb Writers>
<commands>
pf2orb [-s sta] [-p subcode] pfile orb
    put parameter file onto an orb as packet; use -s and -p to specify parts of packet srcname

dbt2orb [-v] [-s subset_expr] [-l naptime] db table orb
    read rows from database and post them to orb

dborigin2orb [options] db orb
    copy new origins from db.origin into orb for automatic association of external catalogs with real time events
<options>
-after time	specify start earlier than now()
-delay delay	wait delay seconds before appending to orb
-nowait	quit after processing existing db.origin
-number n	quit after processing n events
-target_orb2dbt target	specify alternate target orb2dbt
-v	more verbose output
</options>

private db2orb [options] {database|view} [orb]
    send database as packets to an orbserver
<options>
-d	hex dump output packets
-D delay	make packets delay second late
-f fast	send packets as quickly as possible
-l	loop forever
-m #timesteps
-n n	stop after sending n packets
-p pkttype	make output packets in pkttype format
-s subset	use only wfdisc rows which match subset
-t timestep	size of packets in seconds
-v	verbose
</options>

dbreplay [options] view orb [t0 [{t1|T}]]
    replay database view to orb from t0 to t1 (or t0+T)
<options>
-b max	pause if client is more than max seconds behind
-d 	send station portion of database
-e 	send event portion of database
-F db	db to map net/sta/chan/loc
-n n	quit after n packets
-p pktsuffix	specify output packet type
-r rate	specify data rate as ratio to real time 
-s expr	subset input according to expression
-T timeout 	with -w, give up after some timeout 
-t timestep	specify packet time size
-u	don't append /@ suffix
-v	more verbose
-w client	specify read client to watch (to avoid overruns)
-x	eliminate trailer packet used for orb2db flush  
</options>

<subsection Real Time processing: Orb reader/writers>
<commands>
orb2orb [options] in out [start [period|end]]
    copy data from one orb to another
<options>
-c suffix	convert packets to suffix format
-C rate	throttle to specified output rate: kbytes/sec or (with p suffix) pkts/sec.
-d	print hex dump of each packet 
-D seconds	delay copying packets for specified seconds
-f	for file input, do not adjust time tags, and output packets as quickly as possible
-i secs	save state file every secs seconds
-m re1	read only packets which match re1 
-n n	stop after n packets
-p pf	alternate parameter file
-r re2	don't read packets matching re2
-S filename	save state in filename
-s p	start after pktid #p
-T a.pf specify srcnames to pass through in a.pf 
-U	unstuff each packet and print
-u n	discard duplicates in latest n packets
-v	more verbose
-X xlat	translate srcnames according to morph table
-x	require acknowledgment for each packet sent
</options>

orbxchange [-d db] pf
    run multiple orb2orb connections controlled by pf; use db for fallback orb sources

orbxfer2 [-N net] [-p pf] [-w dir] [-v] [file ...] orb
    write files into orb; with -w, watch directory dir and send files which appear there into the orb and remove them from dir

orbxfer2 [-p pf] [-S state] [-v] orb
    receive incoming files, save into directory specified in pf

deprecated orbxfer [-b pktsize] [-d dir] [-ovv] file ... orb
    write files into orb

deprecated orbxfer [-b pktsize] [-d dir] [-ovv] -w dir orb
    watch directory dir and copy files into orb

deprecated orbxfer [-d dir] [-S state] [-m match] [-r reject] [-s where] [-ovv] orb
    receive incoming files, save into dir

orb2genc [options] orbin orbout
    convert input packets into unmultiplexed GENC format
<options>
-t translation_pf
-start {pktid|time|OLDEST}
-select select_expr
-reject reject_expr
-S statefile	
-dbcalib dbcalib
-v
</options>

orbaddcalib [options] dbcalib orbin orbout
    add calib, calper and segtype to ORB waveform packets
<options>
-onlynull	only fill in packets with NULL calib values
-dbcheck	check database for each waveform packet
-v	more verbose
-t translation_pf	morph SEED names
-select select_expr	select expression for incoming packets
-relect reject_expr	reject expression for incoming packets
-start {pktid|time|OLDEST}	initial ORB read pointer position
-S statefile	statefile
</options>

orbstaseg [options] csssta orbdetect orbwfin orbwfout
    single station waveform segmenter
<options>
-start {pktid|time|OLDEST}
-select_wf expr
-twin_pre twin_pre
-twin_post twin_post
-twin_write_timeout
-twin_maxon twin_maxon	
-S statefile	
-repackage twin subcode	
-detev
-v
</options>

orbdetev2detection [options] dbfkeys orbin orbout
    convert detev database rows to detection rows
<options>
-delay delay_seconds
-start {pktid|time|OLDEST}
-S statefile	
-v
</options>

<subsection Real Time Event Detection and Location>
<commands>
deprecated orbtrigger [options] orbname
    real time network trigger algorithm
<options>
-v
-tstart t0
-target_orbassoc torbassoc
-pf pf
-out orbout
</options>

orbassoc [options] orbin orbout ttgridf1 [ttgridf2 [...]]
    spatial grid search based real time associator/locator
<options>
-auth author	origin author field
-delay delay	time delay for processing latent stations
-pf pf
-select expr
-start {pktid|time|OLDEST}
-target_orb2dbt torb2dbt
-trigger_start_only
-v
</options>

orbdetect [options] orbname dbname
    multi-frequency STA/LTA detector
<options>
-nopending	suppress pending detection packets
-onlypicks	only output onset time packets
-out orb
-out_detev orb	output orb for detev packets
-pf pf
-reject re
-select re
-tstart t0
-twin minutes
-v
</options>

ttgrid [-pf pf] [-time {timestr|all}] db
    compute travel time grid file for use by orbassoc and dbgrassoc

displayttgrid [-shownames] filename [gridname]
    display travel-time grids on map

ttgrid_show [-adDgnNPsSv] ttgridfile
    show members of a ttgrid file
<options>
-a	show everything
-d	show depths
-D	show distances
-g	show grids
-n	show nodes
-N	print in a nicer form
-P	show P arrival times
-s	show stations
-S	show S arrival times
</options>

<subsection Real Time Waveform Processing>
<commands>
orbevproc [options] orbwf orbev dbname
    generalized real-time event processor
<options>
-start {pktid|time|OLDEST|NEWEST}
-select expr	input select expression
-number number	number of events to process
-nowait	
-state file	save state in file
-p pf
-tmpdbdir dir	directory for temp databases
-dbwf dbwf	archive waveform database
</options>

orbwfproc [options] dbmaster [datatag1 dataname1 [datatag2 dataname2 [...]]]
    generalized real-time waveform processor
<options>
-start {pktid|time}
-end time
-select expr	input select expression
-reject expr	input reject expression
-state file	save state in file
-p pf
-v
</options>

orbwfrms [options] dbname orbin [orbout]
    compute running rms estimates from waveform packets
<options>
-start {pktid|time|OLDEST} 
-select sexpr
-reject rexpr 
-end endtime 
-pf pf
-S state
-v
</options>

orbwfmeas [options] orbwf orbdb dbname
    make waveform measurements from an orb
<options>
-select_wf expr
-start {pktid|time|OLDEST|NEWEST}
-number number
-nowait
-state filename	save state in filename
-p pf
-net net
-dbsift_expr dbsift_expr
</options>

deprecated qedd [options] dbname
    daemon to get realtime QED data from finger site
<options>
-l
-ipfinger ipfinger
-sleep seconds
-timeout seconds
-author author
</options>

deprecated orb2sms [-v] [-m match] [-r reject] [-M prog] orb {cell#|email}
     reformat packets from orb as sms messages

deprecated sms2orb [-dv] queue orb
     read incoming sms email from queue directory and write packets to orb

<subsection Saving Orb Data to Database>
<commands>

cdorb2db [options] orb db [start [end|period]]
    copy gappy/out of order (CD1) waveform data from orbserver orb into integer waveform files of database db (starting at time start through end or for stated period)
<options>
-C	check for overlaps and duplicates in packet data
-c re	save channel matching regular expression re
-M	memory map all waveform files (instead of seek/write)
-m re	select packets matching regular expression re
-r re	reject packets matching regular expression re
-p pf	specify parameter file
-S file	save state in file
-t timetags	create file of time tags from input packets
-v	more verbose
-vv	show every packet read.
-w wfname	specify pattern for waveform file names
</options>

db2msd [-t ndays] [-1nv] db
     convert older waveform files to miniseed in place, used with cd2orb. with -1, use steim 1 compression

orb2db [options] orb db [start [end|period]]
    copy waveform data from orbserver orb into database db (starting at time start through end or for stated period)
<options>
-a log	log of waveform files opened and closed
-c re	save channel matching regular expression re
-m re	select packets matching regular expression re
-r re	reject packets matching regular expression re
-p pf	specify parameter file
-S file	save state in file
-s datatype	specify output waveform type (overriding pf)
-T tol		tolerance for packet time tag deviation    
-t timetags	create file of time tags from input packets
-v	more verbose
-vv	show every packet read.
-w wfname	specify pattern for waveform file names
</options>

orb2db_flush [-nv] [-m match] [-r reject] orb
    cause orb2db to write out all waveform data for selected packets

orb2dbt [options] orb dbout [orbout]
    read database packets from an orb and write to database
<options>
-select expr
-reject expr
-start {pktid|time|OLDEST}
-number number
-target_orbmag torbmag
-timeout timeout
-overwrite
-state statefile
-pf pf
-orbdbout orbdbout
-v
</options>

orb2db_msg [-q] [-s sleep] [-t timeout] db [pause|continue|status]
    signal orb2db and orb2dbt processes to pause for database db cleanup oro realtime database crunch

par2db [options] orbname dbname [start [window]]
    create database with GPS site coordinates and DC/DAS status parameters from orb
<options>
-c	Extract DC status parameters
-g	Extract GPS site coordinates
-i time_interval
-m re	select packets matching regular expression re
-v	more verbose
</options>

orblatency [options] orb database
    accumulate latency statistics from network
<options>
-m re	select packets matching regular expression re
-n n	quit after n iterations
-r re	reject packets matching regular expression re
-p period	period over which latencies are averaged
-v	more verbose
</options>

orbmsd2days [options] orb
    save miniseed (only) packets from orb into day volumes
<options>
-c nscl	specify particular net_sta_chan_loc desired
-D file	file for writing problem packets
-p time|oldest|pktid	position
-d db	create wfdisc table in db
-S state	save orb position in state file
-U	limited duplication suppression
-I	inclusive time screening
-m re1	select packets matching regular expression re1
-r re2	reject packets matching regular expression re2
-s st	save data only when block start time >= st
-e et	save data only when block start time < et
-w wf	pattern for the output miniseed files
-v	Be more verbose.
</options>

q330logs2db  [options] orb db
    add key q330 orb log output to db table
<options>
-p pf	parameter file
-v	verbose 
-l match_logname	regex for limiting log review
-s {OLDEST|start_time} 	start here rather than newest packet
-S state	statefile 
</options>

<subsection Miscellaneous>
<commands>
deprecated resetnetblazer hostname line timeout
    reset Telebit Netblazer terminal server

deprecated orb2eworm parameter_file.d
    export waveform data from an Antelope orb to an Earthworm system

orb2pf [options] orb [file]
    copy parameter file objects from an orb to file
<options>
-select expr
-start {pktid|time}
-number number
-nowait
</options>

mail_parser [options] [file [file...]]
    direct incoming email to customized perl handlers
<options>
-v
-m
-f logfile
-l library_path
-p pf
</options>

<subsection Archiving Data>
<commands>

event_archive [options] dbin dbout
    copy event information (arrivals, origins, and waveforms) from continuous database dbin to archive dbout
<options>
-I idserver	specify idserver
-l n	wait n days before copying an event
-M db 	db containing site, sitechan: used only on initial archive to dbout
-m addr	send errors as email to addr
-s t1	process events after time t1
-e t2	process events before time t2
-n	ignore check for reviewed events
-p pf	use parameter file pf
-t tdb	use temporary database tdb
-w wff	output waveform format    
-v	be verbose
-V	be extremely verbose
</options>

rtbackup [-v] [-V] [-n] 
         [-p pf] [-r reject_stas] [-s sta_match]
         [-t start_time ] [-e end_time] rt_db 
    backup waveform and database data from rt_db to independent disk directory

deprecated rtbackup2tape [-v] [-m who] [-p pf] db drive
    original rtbackup (renamed)- backup waveform and database data from db to (tape) drive

deprecated get_archive [options] db dbout drive [t0 [t1]]
    restore waveforms (between t0 and t1) to dbout using db.wftar from rtbackup tape on drive
<options>
-c re	select channels with regular expression
-s re	select stations with regular expression
-v	more verbosely
</options>

rtdbclean [-n] [-v] [-V] [-w] [-p pf] orb rt_db
    remove old waveform data and associated database records

deprecated get_wftar -v dbmaster tape_drive
    extracts wftar table from an ARTS archive tar tape

online_backup [options] [directories]
    backup certain files to an online directory
<options>
-d n	remove log files after n days
-d dir	specify an alternate base directory
-m	send mail rather than writing to stdout
-n	don't actually run backup, but show what would happen
-p pf	specify parameter file
-t t	backup files modified more recently than time t
-v	more verbose
-V	show generated perl procedure which selects files to be saved
-y n	backup files modified in last n days
</options>

<subsection Orb Diagnostic Tools>
<commands>
orbreap [options] orb [start [end|range]]
    multipurpose orb dumping program
<options>
-a time
-c	print packet header information
-C	print packet header information and data
-d	dump packets in hexadecimal format
-F	expect packets in "Fake" format
-m re	select packets matching re
-r re	reject packets matching re
-M	select only packets with numeric source names
-n n	reap n packets, then quit
-N	show delays.
-o file	save packets in file in forb(5) format
-p bufsize	set socket buffer sizes to bufsize
-R {a|x|f}	choose forb representation: ascii, hex, or header only
-s pktid	start at pktid
-S state	save state file
-v	more verbose
</options>

private orbsend [options] orb
    send test packets to orbserver
<options>
-b m	send m byte packets
-a t	align packets on t second marks
-d d	packets are delayed d seconds
-e	some packets with future times
-f	packet is uninitialized
-F 	special test mode packets
-g {sin|cos|sqr|tri|saw|dlt|ran|stp|pkt}	wf packets contain signal
-i pktfile	read packet from forb(5) file
-j jitter	add some jitter to packet times
-M	regularly send packet with unique srcname
-N name	specify packet name
-n n	number of time steps (default = 10)
-r rate	specify data rate in kbytes/second
-R pktrate	specify packet rate (per srcname) in pkts/second
-s s	send packets for s distinct srcnames for each time step
-S srcname	specify source name for packet read from forb file
-t t0	first packet time = t0
-v
-x
-0 srcid0
</options>

deprecated stream2orb orbname
    play back raw orb packet stream back into an orb
<options>
-repeat infile1 [infile2 [...]]
-v	Verbose flag.
-tgap tgap
-dattime
-events dbname
-sleep seconds
</options>

deprecated orblist [options] orb [start [twindow]]
    list an orb contents
<options>
-d	Tells orblist to print hexdump of orb packets
-h	Tells orblist to print hexdump of raw packets
-m srcmatch
-n time_diff
-s	do not sort packets
</options>

private orbd [-abips] name
    dump out an orb ring buffer for debugging
<options>
-a	Assume packets are straight ascii and print them
-b	Print packets using standard hex dump format
-i	Enter interactive mode
-p	Show packet index
-s	Show source index
-v	Show indexes verbosely
</options>

deprecated orb2stream orbname
    dump out raw orb packets
<options>
-src srcexpr
-npackets npackets
-tstart t0
-twin minutes
-tstart_dat time_dat
</options>

deprecated streamassoc strfile dbsite dborigin refsta method model
    associate events with an orb stream file

orbcapture [options] orb db file
    save packets from orbserver orb to file when new row in database (satisfies condition)
<options>
-b m	start capture m packets before trigger packet
-a n	capture n packets after trigger packet
-c condition	only new rows satisfying condition trigger capture
-R {a|x|f}	specify output format ascii, hexadecimal, or header only
-v	verbose
</options>

deprecated orbcp -orbin in_orbname -orbout out_orbname
    orb copy program
<options>
-src srcexpr
-ircnt
-orcnt
-pktstart pktid
-rcnt_time minutes
-npackets npackets
</options>

deprecated old_orb2orb in out [start [period|end]]
    copy data from one old orbserver orb to another
<options>
-b bufsize
-d	print hex dump of packets as they are received
-f	when reading from plain file, do not adjust time tags
-u	unstuff packets as they are received
-N	print #samples of data
-l	loop repeatedly over input forb(5) file
-m match
-r reject
-n npkts	Stop after receiving npkts packets
-R representation
-s pktid
-S statefile
-v more verbose
</options>

pkttypes [-c]
    print summary of packet types for installed packet library 

orbstash [-m match] [-o out] [-r reject] [-v] in [srcname]
     get and print stash packets from an orbserver in

ipvalidate [-p pf] [-v] [ip-addresses]
     test if particular ip address is accepted or rejected by valid_ip_address list in pf
  
