<chapter Expression Calculator>
<subsection Aggregate Functions>
<function>
count()
    count records in a group or table

count_table()
    count records in a table

max(expr)
    find the maximum of the expression in a group or a table

max_table(expr)
    find the maximum of the expression in a table

min(expr)
    find the minimum of the expression in a group or a table

min_table(expr)
    find the minimum of the expression in a table

sum(expr)
    add an expression across a group or a table

sum_table(expr)
    add an expression across a table

record()
    return the Datascope record number

<subsection Arithmetic Functions>
<function>
abs(x)
    absolute value

atan(x,y)
    arctangent of angle from x-axis to point (x,y)

ceil(x)
    next integer >= x

cos(x)
    cosine of x in degrees

exp(x)
    e^x

floor(x)
    next integer <= x

int(x)
    floor(abs(x))*sign(x)

log(x)
    natural logarithm

log10(x)
    base 10 logarithm

max(x,y)
    maximum of x,y

min(x,y)
    minimum of x,y

sign(x)
    1 if x>0, -1 if x<0, 0 otherwise

sin(x)
    sine of x in degrees

sqrt(x)
    square root

tan(x)
    tan of x in degrees

<subsection Time Conversion>
<function>
date2e(year, month, day, seconds)
    convert to epoch time

epoch(jdate)
    convert from jdate to time

now()
    the current epoch time

strdate(epoch)
    convert time to date string

strtdelta(epoch)
    convert time difference to string

strtime(epoch)
    convert time to string

strydtime(epoch)
    convert time to string with yearday

epoch2str(epoch,format[,timezone])
    convert time to string using format, optionally for a timezone

yearday(epoch)
    convert from epoch time to yearday (jdate)

<subsection Flinn-Engdahl Regions>
<function>

grname(lat,lon)
    geographic region name

grn(lat,lon)
    geographic region number

srname(lat,lon)
    seismic region name

srn(lat,lon)
    seismic region number

<subsection Seismic Travel Times>
<function>

pphasetime(delta,depth)
ptime(delta,depth)
    elapsed time for first p-arrival from event at delta, depth

sphasetime(delta,depth)
stime(delta,depth)
    elapsed time for first s-arrival from event at delta, depth

phasetime(phase, delta, depth)        
    elapsed time for specified phase for event at delta, depth


parrival()
    time of first p-arrival

sarrival()
    time of first s-arrival

arrival(phase)
    arrival of specified phase

phase_arrival(velocity)
    time of phase arrival, given velocity in degrees/second


pphase_slowness(delta,depth)
    slowness of first p-arrival from event at delta, depth

sphase_slowness(delta,depth)
    slowness of first s-arrival from event at delta, depth

phase_slowness(phase, delta, depth)   
    slowness for specified phase for event at delta, depth


<subsection Spherical Geometry>
<function>
azimuth(lat1, lon1, lat2, lon2)
    azimuth from point 1 to point 2

distance(lat1, lon1, lat2, lon2)
    distance in degrees between two points

latitude(lat, lon, distance, azimuth)
    latitude of the point a distance away from (lat,lon) in the direction azimuth

longitude(lat, lon, distance, azimuth)
    longitude of the point a distance away from (lat,lon) in the direction azimuth

km2deg(km)
    convert kilometers to (nominal) degrees

deg2km(deg)
    convert degrees to (nominal) kilometers

<subsection Strings>
<function>
strlen(str)
    number of characters in str

substr(str,x0,n)
    return portion of string str from x0 to n    

patsub(str,pattern,replacement)
    replace str matching pattern with replacement 

null("fieldname")
    return null value for a field

<subsection External Files and Commands>
<function>
is_present(filename)

concatpaths(dir,dfile)
    join two path segments

dirname(path)
    return all but last component of path

basename(path)
    return last component of path

<expression>
["wc" extfile()]
    execute a unix command, as in this example

<function>
extfile([ table ])
    generate the complete path for an external file

is_present(filename)
    return 1 if filename exists, 0 otherwise 

<subsection Operators>
<List>

+	arithmetic addition
-	arithmetic subtraction

*	arithmetic multiplication
^	exponentiation

/	arithmetic division
%	arithmetic modulus

>>	bit shift right
<<	bit shift left

.	string concatenation

:=	assignment

" 	surrounds a string expression
' 	surrounds a string expression
_	surrounds a time expression (suitable for str2epoch)

<expression>
expr ? a : b
    conditional expression: evaluates to a when expr is true, b when expr is false.

<subsection Pattern Matching>
<expression>
A =~ /regular-expression/
    regular expression match

A !~ /regular-expression/
    regular expression does not match

<function>
patsub(old, pattern, replacement)
    replaces the first pattern matched in old with replacement

<subsection Relational Operators>
<List>

==	equals
!=	not equal to

a == NULL
    true if field a has the null value for that field
a != NULL
    true if field a does not have the null value for that field

<	less than
<=	less than or equal to

>	greater than
>=	greater than or equal to

||	logical or
&&	logical and

|	bitwise or
& 	bitwise and
