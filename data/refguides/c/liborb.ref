<library>
Orbserver Access
orb
-lpkt -lorb -lxtra $(TRLIBS)
ORBLIBS
orb.h
routines which implement the orb protocol

<cdeclarations>

int orbopen ( char *name, char *p )
    open a connection to the orbserver name, with permission p = "r" or "w",
    with "&" appended to cause reconnections; returns orb or -1 for failure

int orbclose ( int orb )
    close the orbserver connection orb

int orbselect ( int orb, char *re)
    select packets from orb which match the regular expression re

int orbreject ( int orb, char *re)
    reject packets from orb which match the regular expression re


int orbafter ( int orb, double t )
    set the read position for connection orb after the specified time t

int orbposition ( int orb, char *w );
     set the read position for connection orb according to string w, 
     which may be an epoch time or "newest" or "oldest".

int orbseek ( int orb, int which )
    set the read position for connection orb according to the which code:
    ORBPREV, ORBNEXT, ORBNEXT_WAIT, ORBOLDEST, ORBNEWEST.


int orbresurrect ( int orb, int *last_pktid, double *last_t)
    sets up and uses a bury(3) state file to save and restore a packet
    position for the connection orb.

<subsection Reading>
<cdeclarations>
int orbget ( int orb, int which, int *pktid, char *srcname, double *time, char **pkt, int *nbytes, int *bufsize )
    get packet which from orb, returning pktid, srcname, time, and nbytes of data pkt. size of buffer pkt is adjusted as needed; pktid may be explicit pktid or ORBPREV, ORBNEXT, ORBNEXT_WAIT, ORBOLDEST, ORBNEWEST.

int orbgetstash ( int orb, char *srcname, double *time, char **packet, int *nbytes, int *bufsize )
    get stash packet for srcname

int orbreap ( int orb, int *id, char *nm, double *t, char **p, int *n, int *sz )
    read next packet from orb, returning standard packet information

deprecated int orbreap_nd ( int orb, int *id, char *nm, double *t, char **p, int *n, int *sz )
    read next packet from orb, returning standard packet information, or
    ORB_INCOMPLETE if no packet is available

int orbreap_timeout ( int orb, double sec, int *id, char *nm, double *t, char **p, int *n, int *sz )
    read next packet from orb, returning standard packet information, or
    ORB_INCOMPLETE if no packet is available after sec seconds

<subsection Writing>
<cdeclarations>
int orbput ( int orb, char *srcname, double time, char *packet, int nbytes )
    write the nbytes of packet data onto orb with specified srcname and time

int orbputx(int orb, char *srcname, double pkttime, char *pkt, int nbytes)
    write the nbytes of packet data onto orb with specified srcname and time, waiting for acknowledgement

int orbput_nolag(int orb, char *srcname, double t, char *packet, int nbytes, LagParams *params)
    write to output orb ensuring that certain readers have read previous packets first, using lag parameter

<subsection Status Information>
<cdeclarations>
int orbtell ( int orb )
    return current pktid position for orb

int orbping ( int orb, int *version )
    verify active connection to orb, returning an orb version number

int orbclients ( int orb, double *when, Orbclient **client, int *nclient )
    get list of orb clients 

int orbsources ( int orb, double *when, Orbsrc **source, int *nsource )
    get list of srcnames available from orb

deprecated double orblag(int orb, char *match, char *reject, Laggards **laggards)
     return stats showing how far behind clients are 

deprecated void freeLaggards ( Laggards *laggards )
     free Laggards structure returned by orblag

private int orbset_logging ( int orb, int level )
    set the level of logging for an orbserver

deprecated int orbpkt2pf ( char *packet, int packet_size, Pf **pf )
    extracts parameter file from an orb packet

deprecated int pf2orbpkt ( Pf *pf, char *name, int orb )
    places a parameter file on an orbserver

int orbstat ( int orb, Orbstat **orbstat )
    get some status information from orb
